package com.zhqydot.framework.easyrouter.compiler;

import com.google.auto.service.AutoService;

import java.io.IOException;
import java.io.Writer;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;
import javax.tools.JavaFileObject;

@AutoService(Processor.class)
public class RouterProcessor extends AbstractProcessor {

    private Filer mFiler;
    private Elements mElements;
    private Types mTypes;

    @Override public synchronized void init(ProcessingEnvironment processingEnvironment) {
        super.init(processingEnvironment);
        mFiler = processingEnvironment.getFiler();
        mElements = processingEnv.getElementUtils();
        mTypes = processingEnv.getTypeUtils();
    }

    @Override
    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {
        Set<? extends Element> routerElements = roundEnvironment.getElementsAnnotatedWith(Route.class);
        Map<String, TypeElement> routeMap = new HashMap<>();
        TypeMirror typeActivity = mElements.getTypeElement("android.app.Activity").asType();
        for (Element element : routerElements) {
            if (!mTypes.isSubtype(element.asType(), typeActivity)) {
                throw new RuntimeException("Unsupported class type, type is [" + element.asType().toString() + "], only support Activity now.");
            }
            routeMap.put(element.getAnnotation(Route.class).path(), (TypeElement) element);
        }
        createFile(routeMap);
        return true;
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.RELEASE_8;
    }

    @Override public Set<String> getSupportedAnnotationTypes() {
        Set<String> annotations = new LinkedHashSet<>();
        annotations.add(Route.class.getCanonicalName());
        return annotations;
    }

    private void createFile(Map<String, TypeElement> routeMap) {
        for (Map.Entry<String, TypeElement> entry : routeMap.entrySet()) {
            try {
                String className = "com.zhqydot.framework.easyrouter.core.RouteLoader$" + entry.getValue().getSimpleName() + "$" + entry.getKey();
                JavaFileObject jfo = mFiler.createSourceFile(className, new Element[]{});
                Writer writer = jfo.openWriter();
                writer.write(brewCode("RouteLoader$" + entry.getValue().getSimpleName() + "$" + entry.getKey(), entry));
                writer.flush();
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private String brewCode(String className, Map.Entry<String, TypeElement> entry) {
        StringBuilder builder = new StringBuilder();
        builder.append("package com.zhqydot.framework.easyrouter.core;\n\n");
        builder.append("import com.zhqydot.framework.easyrouter.core.router.RouterManager;\n");
        builder.append("import ").append(entry.getValue().getQualifiedName()).append(";\n");
        appendComment(builder);
        builder.append("public class ").append(className).append(" { \n\n");
        builder.append("\tpublic void load() { \n");
        builder.append("\t\t");
        builder.append(String.format("RouterManager.register(\"%s\", %s.class);", entry.getKey(), entry.getValue().getSimpleName()));
        builder.append("\n");
        builder.append("\t}\n");
        builder.append("}");
        return builder.toString();
    }

    private void appendComment(StringBuilder builder) {
        builder.append("\n/**\n");
        builder.append(" * This class was generated by EasyRouter\n");
        builder.append(" * do not modify it\n");
        builder.append(" * or it will cause EasyRouter run with exception\n");
        builder.append(" */\n\n");
    }
}